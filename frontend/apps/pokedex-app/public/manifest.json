{
    "short_name": "pokedex-app",
    "start_url": "/pokedex-app",
    "readme": "# Pokedex App\n\n> from udemy - The Modern React Bootcamp (Hooks, Context, NextJS, Router) by Colt Steele\n\n## Components\n\n-   [ ] Pokecard\n    -   [ ] Shows a single Pokemon, with their name, image, and type.\n-   [ ] Pokedex\n    -   [ ] Is provided, via props, an array of objects describing different pokemon, and renders a series of Pokecard components.\n\nUse the defaultProps feature of Pokecard to provide a default list of Pokemon characters to show. You can use this list for a good set of defaults:\n\n```json\n[\n    { \"id\": 4, \"name\": \"Charmander\", \"type\": \"fire\", \"base_experience\": 62 },\n    { \"id\": 7, \"name\": \"Squirtle\", \"type\": \"water\", \"base_experience\": 63 },\n    { \"id\": 11, \"name\": \"Metapod\", \"type\": \"bug\", \"base_experience\": 72 },\n    { \"id\": 12, \"name\": \"Butterfree\", \"type\": \"flying\", \"base_experience\": 178 },\n    { \"id\": 25, \"name\": \"Pikachu\", \"type\": \"electric\", \"base_experience\": 112 },\n    { \"id\": 39, \"name\": \"Jigglypuff\", \"type\": \"normal\", \"base_experience\": 95 },\n    { \"id\": 94, \"name\": \"Gengar\", \"type\": \"poison\", \"base_experience\": 225 },\n    { \"id\": 133, \"name\": \"Eevee\", \"type\": \"normal\", \"base_experience\": 65 }\n]\n```\n\nFor each pokemon, their image source should be:\n\n-   `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`\n\n## Further Study\n\n### Fancier Images\n\nUse this alternate source for nicer looking images:\n`https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${id}.png`\n\n> Note that the pokemon id for these images must be padded with zeros to three places, like: 001, 002, 034, 199, etc. Try writing a function to take an id like 4 and turn it into 004.\n\n### Pokegame Component\n\nModify your component hierarchy so that App renders a component called Pokegame. Pokegame should take your list of 8 pokemon and randomly assign them into two hands of 4 cards each. It should then render two Pokedex components, one for each hand.\n\nOnce you’ve got this working, modify your Pokegame so that it also calculates the total experience for each hand of pokemon. It should pass this total to the Pokedex.\n\nNext, have the Pokegame component determine which hand is the “winner,” where the winning hand is the one with the higher total experience. Then modify the Pokedex component one more time so that it accepts a prop of isWinner. If the Pokedex is the winning one, it should display the message “THIS HAND WINS!” at the bottom of the deck.\n\nNow when you load the page, you should see two different hands with a randomly changing winner every time you refresh.\n"
}
